#pragma kernel Update

#include "ParticleCommon.cginc"

RWStructuredBuffer<Particle> _ParticleBuffer;
Texture2D<float4> _ColorMap;
Texture2D<float4> _DepthMap;

int _Width;
int _Height;
int _PositionScale;
float _DepthOffset;
float4 _IntrinsicsVector;
float4x4 _TransformMatrix;
uint2 _DepthResolution;
float2 _GridPointsScale;

float _Scale;
float _MaxFar;
SamplerState _LinearClamp;

[numthreads(8,8,1)]
void Update(uint3 id : SV_DispatchThreadID)
{
    const int index = id.y * _Width + id.x;

    uint2 gridPoint = id.xy * _GridPointsScale;
    float2 uv = float2(id.xy) / _DepthResolution;

    Particle p = _ParticleBuffer[index];
    float4 color = _ColorMap.SampleLevel(_LinearClamp, uv, 0);
    float depth = _DepthMap.SampleLevel(_LinearClamp, uv, 0).x * 1000.0;
    float xrw = (float(gridPoint.x) - _IntrinsicsVector.z) * depth / _IntrinsicsVector.x;
    float yrw = (float(gridPoint.y) - _IntrinsicsVector.w) * depth / _IntrinsicsVector.y;
    float3 prw = float3(xrw, yrw, depth);
    // float4 pos = mul(_TransformMatrix, float4(prw, 1.0));
    float4 pos = float4(prw, 1.0);
    p.position = pos.xyz / pos.w;
    p.color = color;
    p.scale = 3.5;// * max(1.0, pos.z);

    _ParticleBuffer[index] = p;
}
